import { auth } from '@/entities/user/auth'
import { NextRequest, NextResponse } from 'next/server'
import { authRoutes, getRouteAuth, getRouteHome, privateRoutes } from './shared/lib/routes'

export default auth(async (req: NextRequest) => {
  const { pathname } = req.nextUrl
  const session = await auth()

  const isAuth = !!session
  const isAuthRoute = authRoutes.some((route) => pathname.startsWith(route))
  const isPrivateRoute = privateRoutes.some((route) => pathname.startsWith(route))

  // üîí –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ login
  if (isPrivateRoute && !isAuth) {
    const loginUrl = new URL(getRouteAuth(), req.url)
    return NextResponse.redirect(loginUrl)
  }

  // üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ login/register ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (isAuth && isAuthRoute) {
    return NextResponse.redirect(new URL(getRouteHome(), req.url))
  }

  // ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  return NextResponse.next()
})

/*
 * –ó–∞–ø—É—Å–∫–∞–µ–º middleware
 * ‚Äî –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
 * ‚Äî –∫—Ä–æ–º–µ:
 *   1) /_next/*  (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
 *   2) /favicon.ico, /robots.txt –∏ –ø—Ä–æ—á–µ–≥–æ –∏–∑ public
 *   3) /api/*     (–≤–∫–ª—é—á–∞—è /api/auth/*)
 *   4) /img/*     (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
 *   5) /fonts/*   (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
 */
export const config = {
  matcher: ['/((?!api/.*|_next/.*|favicon.ico|robots.txt|img/.*|fonts/.*).*)'],
}
