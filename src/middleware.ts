import { withAuth, type NextRequestWithAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

const authPaths = ["/sign-in", "/sign-up"];
// const privatePaths = [];

export default withAuth(
  function middleware(req: NextRequestWithAuth) {
    const { pathname } = req.nextUrl;

    const isAuth = !!req.nextauth.token;

    // üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ /sign-in –∏ /sign-up –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    if (isAuth && authPaths.includes(pathname)) {
      return NextResponse.redirect(new URL("/", req.url));
    }

    // üîê –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ privatePaths –¥–ª—è –ù–ï–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    // if (!isAuth && privatePaths.includes(pathname)) {
    //   return NextResponse.redirect(new URL("/sign-in", req.url));
    // }

    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: () => true, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
    },
  },
);

export const config = {
  matcher: ["/((?!api|_next|static|favicon.ico).*)"], // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
};
